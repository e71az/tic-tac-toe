#!/usr/bin/env ruby

@zones = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
first_player_symbol = 'X'
second_player_symbol = 'O'
current_player = 1
turns = 0
@numbers_selected = []

def board
  puts ''
  @zones.each { |value| puts value.to_s.tr(',', ' ') }
  puts ''
end

def change_value(input, player_sym) # rubocop:disable Metrics/CyclomaticComplexity
  case input
  when 1
    @zones[0][0] = player_sym
  when 2
    @zones[0][1] = player_sym
  when 3
    @zones[0][2] = player_sym
  when 4
    @zones[1][0] = player_sym
  when 5
    @zones[1][1] = player_sym
  when 6
    @zones[1][2] = player_sym
  when 7
    @zones[2][0] = player_sym
  when 8
    @zones[2][1] = player_sym
  when 9
    @zones[2][2] = player_sym
  end
end

def decide_winner_or_draw
  # This function will evaluate which player won or when it was a draw and then return win or draw when respective
  # conditions are met.
  # When this is neither a winner or draw move, the function returns false.
  # Proceeds to exit the  loop when true
  board
  puts @zones
  if @zones.none? { |i| i.is_a?(Integer) }
    true
  else
    false
  end
end

def verify_input(player_input, current_player_name)
  # Verifies when the position input of the players is already taken and when it is valid (1-9). Proceeds to ask again
  # forr a valid input in the_case that the input is not valid.
  # This function will take as parameters player_input and current_player
  while @numbers_selected.include?(player_input) || (player_input.to_i < 1) || (player_input.to_i > 9)
    print "Another place please #{current_player_name} =>"
    player_input = gets.chomp.to_i
  end
end

p 'What is the first player name?'
first_player_name = gets.chomp

p 'What is the second player name?'
second_player_name = gets.chomp

while decide_winner_or_draw == true
  puts ''
  p 'This is the Tic-Tac-Toe board'

  board
  if current_player == 1

    print "Your turn, select a place to insert your symbol #{first_player_name} => "
    player1_input = gets.chomp.to_i

    verify_input(player1_input, first_player_name)

    change_value(player1_input, first_player_symbol)
    @numbers_selected << player1_input.to_i
    current_player = 2

  else

    print "Your turn, select a place to insert your symbol #{second_player_name} => "
    player2_input = gets.chomp.to_i

    verify_input(player2_input, second_player_name)

    change_value(player2_input, second_player_symbol)
    @numbers_selected << player2_input.to_i
    current_player = 1

  end
  winner = decide_winner_or_draw

  if winner == false
    # breaks out from the loop and prints who won or prints when it's a draw

    board
    p 'Game finished'
    break
  end
  turns += 1

end
